"""
Extract information from YARP pickle file and dump to a pretty table.
Set up to parse a pickle file generated by `class_main_dft.py`.

To use this script:
python read_dft_pkl.py /path/to/pickle/file
"""

import argparse
from tabulate import tabulate

from pyTEST_Example.wrappers.reaction import reaction
from pyTEST_Example.DFT_class import RxnProcess, ConformerProcess
from pyTEST_Example.initialize import load_pickle


def main(file):
    rxns = load_pickle(file)

    table = []
    for i, dft_rxn in enumerate(rxns):

        
        rxn = dft_rxn.rxn
        conformers = [_ for _ in rxn.IRC_xtb.keys()]
        for idx, conf in enumerate(conformers):
            label = f'{rxn.reactant_inchi}_{rxn.id}_{conf}'
            
            # Pull out info from low-level (LL) calculations
            ll_barrier = rxn.IRC_xtb[conf]["barriers"][0] # reactant-side barrier in kcal/mol
            ll_type = rxn.IRC_xtb[conf].get("type", "unclassified")
            
            # Pull out info from high-level (HL) calculations
            dft_conf = dft_rxn.conformers[idx]
            id = dft_conf.conformer_id
            lot = dft_conf.TSOPT.dft_lot
            hl_ts_barrier = rxn.TS_dft[lot][id]["Barrier"]["F"] # reactant-side barrier in kcal/mol
            hl_irc_barrier = rxn.IRC_dft[lot][id]['barriers'][1] # reactant-side barrier in kcal/mol
            
            
            # Into the table goes the row!
            table.append([
                label, i, conf, ll_barrier, ll_type, hl_ts_barrier, hl_irc_barrier
            ])
    headers = ["Reaction Label", "Reaction Index", "Conformer Index", "xTB Forward Barrier (kcal/mol)", "xTB IRC Classifier",
                "DFT-tsopt Forward Barrier (kcal/mol)", "DFT-irc Forward Barrier (kcal/mol)"]
    print(tabulate(table, headers=headers, tablefmt="pretty"))

            


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="read and analyze YARP pickle files from class_main_dft")
    parser.add_argument("file", help="path to YARP pickle file")
    args = parser.parse_args()

    main(args.file)